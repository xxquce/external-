// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnhancedStorageETH {
    address public owner;
    string public storedData;
    uint256 public creationTimestamp;
    bool public isLocked;
    uint256 public contractBalance;

    event DataStored(address indexed user, string data);
    event DataDeleted(address indexed deleter);
    event FundsReceived(address indexed sender, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier notLocked() {
        require(!isLocked, "Contract is locked and data cannot be modified");
        _;
    }

    receive() external payable {
        emit FundsReceived(msg.sender, msg.value);
    }

    constructor() {
        owner = msg.sender;
        creationTimestamp = block.timestamp;
        isLocked = false;
    }

    function set(string memory newData) external onlyOwner notLocked {
        storedData = newData;
        emit DataStored(msg.sender, newData);
    }

    function get() external view returns (string memory) {
        return storedData;
    }

    function deleteData() external onlyOwner notLocked {
        delete storedData;
        emit DataDeleted(msg.sender);
    }

    function lockContract() external onlyOwner {
        isLocked = true;
    }

    function unlockContract() external onlyOwner {
        isLocked = false;
    }

    function withdraw(uint256 amount) external onlyOwner {
        require(amount <= contractBalance, "Insufficient contract balance");
        payable(owner).transfer(amount);
    }
}
